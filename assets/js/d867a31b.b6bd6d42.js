/*! For license information please see d867a31b.b6bd6d42.js.LICENSE.txt */
"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[93251],{21020:(e,s,t)=>{var l=t(96540),a=Symbol.for("react.element"),i=Symbol.for("react.fragment"),r=Object.prototype.hasOwnProperty,n=l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function d(e,s,t){var l,i={},d=null,o=null;for(l in void 0!==t&&(d=""+t),void 0!==s.key&&(d=""+s.key),void 0!==s.ref&&(o=s.ref),s)r.call(s,l)&&!c.hasOwnProperty(l)&&(i[l]=s[l]);if(e&&e.defaultProps)for(l in s=e.defaultProps)void 0===i[l]&&(i[l]=s[l]);return{$$typeof:a,type:e,key:d,ref:o,props:i,_owner:n.current}}s.Fragment=i,s.jsx=d,s.jsxs=d},28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>n});var l=t(96540);const a={},i=l.createContext(a);function r(e){const s=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function n(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),l.createElement(i.Provider,{value:s},e.children)}},37037:(e,s,t)=>{t.r(s),t.d(s,{Badge:()=>b,Bullet:()=>o,Details:()=>h,SpecifiedBy:()=>g,assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>u});const l=JSON.parse('{"id":"types/objects/blacklist-rule-criteria","title":"BlacklistRuleCriteria","description":"The BlacklistRuleCriteria type represents the criteria of a BlacklistRule.","source":"@site/api/types/objects/blacklist-rule-criteria.mdx","sourceDirName":"types/objects","slug":"/types/objects/blacklist-rule-criteria","permalink":"/api/types/objects/blacklist-rule-criteria","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"blacklist-rule-criteria","title":"BlacklistRuleCriteria"},"sidebar":"schemaSidebar","previous":{"title":"BlacklistRuleConnection","permalink":"/api/types/objects/blacklist-rule-connection"},"next":{"title":"BlacklistRuleData","permalink":"/api/types/objects/blacklist-rule-data"}}');var a=t(74848),i=t(28453),r=t(96540);const n={id:"blacklist-rule-criteria",title:"BlacklistRuleCriteria"},c=void 0,d={},o=()=>(0,a.jsx)(a.Fragment,{children:(0,a.jsx)("span",{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"},children:"\xa0\u25cf\xa0"})}),g=e=>(0,a.jsxs)(a.Fragment,{children:["Specification",(0,a.jsx)("a",{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"\\_blank",href:e.url,title:"Specified by "+e.url,children:"\u2398"})]}),b=e=>(0,a.jsx)(a.Fragment,{children:(0,a.jsx)("span",{className:e.class,children:e.text})}),h=({dataOpen:e,dataClose:s,children:t,startOpen:l=!1})=>{const[i,n]=(0,r.useState)(l);return(0,a.jsxs)("details",{...i?{open:!0}:{},className:"details",style:{border:"none",boxShadow:"none",background:"var(--ifm-background-color)"},children:[(0,a.jsx)("summary",{onClick:e=>{e.preventDefault(),n((e=>!e))},style:{listStyle:"none"},children:i?e:s}),i&&t]})},u=[{value:"Fields",id:"fields",level:3},{value:'<code>BlacklistRuleCriteria.<b>clientTokens</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriteriaclienttokensstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>noClientTokens</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriterianoclienttokensstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>clients</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriteriaclientsstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>noClients</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriterianoclientsstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>suppliers</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriteriasuppliersstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>noSuppliers</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriterianosuppliersstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>accesses</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriteriaaccessesstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>noAccesses</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriterianoaccessesstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>contexts</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriteriacontextsstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>noContexts</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriterianocontextsstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>contextsSup</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriteriacontextssupstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>noContextsSup</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriterianocontextssupstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>markets</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriteriamarketsstring--",level:4},{value:'<code>BlacklistRuleCriteria.<b>noMarkets</b></code><Bullet></Bullet><code><b>[String!]</b></code> <Badge class="badge badge--secondary "></Badge> <Badge class="badge badge--secondary "></Badge>',id:"blacklistrulecriterianomarketsstring--",level:4},{value:"Member Of",id:"member-of",level:3}];function x(e){const s={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.p,{children:"The BlacklistRuleCriteria type represents the criteria of a BlacklistRule."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-graphql",children:"type BlacklistRuleCriteria {\n  clientTokens: [String!]\n  noClientTokens: [String!]\n  clients: [String!]\n  noClients: [String!]\n  suppliers: [String!]\n  noSuppliers: [String!]\n  accesses: [String!]\n  noAccesses: [String!]\n  contexts: [String!]\n  noContexts: [String!]\n  contextsSup: [String!]\n  noContextsSup: [String!]\n  markets: [String!]\n  noMarkets: [String!]\n}\n"})}),"\n",(0,a.jsx)(s.h3,{id:"fields",children:"Fields"}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriteriaclienttokensstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"clientTokens"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:'List of the client tokens you want the rule to be applied to. "clientToken" is a dynamic parameter that you can include in your query request if you wish to enforce particular rules from the blacklist. Empty list means this field will not be used to apply the rule.'}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriterianoclienttokensstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"noClientTokens"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:'List of the client tokens you don\'t want the rule to be applied. "clientToken" is a dynamic parameter that you can include in your query request if you wish to enforce particular rules from the blacklist. Empty list means this field will not be used to apply the rule.'}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriteriaclientsstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"clients"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific clients you want the rule to be applied. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriterianoclientsstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"noClients"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific clients you don't want the rule to be applied. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriteriasuppliersstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"suppliers"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific suppliers you want the rule to be applied. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriterianosuppliersstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"noSuppliers"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific suppliers you don't want the rule to be applied. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriteriaaccessesstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"accesses"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific accesses you want the rule to be applied. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriterianoaccessesstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"noAccesses"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific accesses you don't want the rule to be applied. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriteriacontextsstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"contexts"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific contexts you want the rule to be applied. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriterianocontextsstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"noContexts"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific contexts you don't want the rule to be applied. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriteriacontextssupstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"contextsSup"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific contexts you want the rule to be applied. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriterianocontextssupstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"noContextsSup"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific contexts you don't want the rule to be applied. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriteriamarketsstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"markets"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific markets you want the rule to be applied to. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsxs)(s.h4,{id:"blacklistrulecriterianomarketsstring--",children:[(0,a.jsx)(s.a,{href:"#",children:(0,a.jsxs)("code",{style:{fontWeight:"normal"},children:["BlacklistRuleCriteria.",(0,a.jsx)("b",{children:"noMarkets"})]})}),(0,a.jsx)(o,{}),(0,a.jsx)(s.a,{href:"/api/types/scalars/string",children:(0,a.jsx)("code",{style:{fontWeight:"normal"},children:(0,a.jsx)("b",{children:"[String!]"})})})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"list"})," ",(0,a.jsx)(b,{class:"badge badge--secondary ",text:"scalar"})]}),"\n",(0,a.jsx)(s.p,{children:"List of the specific markets you don't want the rule to be applied to. Empty list means this field will not be used to apply the rule."}),"\n",(0,a.jsx)(s.h3,{id:"member-of",children:"Member Of"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.a,{href:"/api/types/objects/blacklist-rule-data",children:(0,a.jsx)(s.code,{children:"BlacklistRuleData"})})," ",(0,a.jsx)(b,{class:"badge badge--secondary badge--relation",text:"object"})]})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(x,{...e})}):x(e)}},74848:(e,s,t)=>{e.exports=t(21020)}}]);