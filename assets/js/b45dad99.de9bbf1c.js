/*! For license information please see b45dad99.de9bbf1c.js.LICENSE.txt */
"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[56571],{21020:(e,n,o)=>{var t=o(96540),r=Symbol.for("react.element"),s=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,i=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,o){var t,s={},l=null,u=null;for(t in void 0!==o&&(l=""+o),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(u=n.ref),n)a.call(n,t)&&!c.hasOwnProperty(t)&&(s[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===s[t]&&(s[t]=n[t]);return{$$typeof:r,type:e,key:l,ref:u,props:s,_owner:i.current}}n.Fragment=s,n.jsx=l,n.jsxs=l},28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var t=o(96540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},74848:(e,n,o)=>{e.exports=o(21020)},85916:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Recommended_Helpers","title":"Recommended Helpers","description":"To facilitate complex points in the Connector, the IConnectorsUtilities class provides several helpful utilities. These helpers simplify common tasks and ensure adherence to Travelgate standards.","source":"@site/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Recommended_Helpers.mdx","sourceDirName":"apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers","slug":"/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Recommended_Helpers","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Recommended_Helpers","draft":false,"unlisted":false,"editUrl":"https://github.com/Travelgate/documentation/tree/main/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Recommended_Helpers.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Recommended Helpers","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"FormTest","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/FormTest_Documentation"},"next":{"title":"Policies Helpers","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Policies_Helpers/PoliciesHelpers"}}');var r=o(74848),s=o(28453);const a={title:"Recommended Helpers",sidebar_position:3},i="Recommended Helpers",c={},l=[{value:"<strong>Utilities Overview</strong>",id:"utilities-overview",level:2},{value:"<strong>IOptionsFromRoomsGenerator</strong>",id:"ioptionsfromroomsgenerator",level:3},{value:"<strong>IOptionsGenerator</strong>",id:"ioptionsgenerator",level:3},{value:"<strong>ICountryConverter</strong>",id:"icountryconverter",level:3},{value:"<strong>IMetadataConnectorsService</strong>",id:"imetadataconnectorsservice",level:3}];function u(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"recommended-helpers",children:"Recommended Helpers"})}),"\n",(0,r.jsxs)(n.p,{children:["To facilitate complex points in the Connector, the ",(0,r.jsx)(n.code,{children:"IConnectorsUtilities"})," class provides several helpful utilities. These helpers simplify common tasks and ensure adherence to Travelgate standards."]}),"\n",(0,r.jsx)(n.h2,{id:"utilities-overview",children:(0,r.jsx)(n.strong,{children:"Utilities Overview"})}),"\n",(0,r.jsx)(n.h3,{id:"ioptionsfromroomsgenerator",children:(0,r.jsx)(n.strong,{children:"IOptionsFromRoomsGenerator"})}),"\n",(0,r.jsxs)(n.p,{children:["This utility is particularly useful in the ",(0,r.jsx)(n.code,{children:"Search"})," operation for suppliers that return rooms instead of pre-made options. Since Travelgate operates with options, this generator accumulates rooms and applies business rules to generate valid options."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Case"}),": Recommended when the supplier provides rooms without combining them into options."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public interface IOptionsFromRoomsGenerator\n{\n  bool TryAddHotelRoom(\n    string hotelCode,           // Unique identifier of the hotel the room belongs to\n    string boardCode,           // Code representing the room's board type (e.g. AI)\n    RoomCombineExtended roomCombineExtended, // Contains detailed info about the room and combination logic\n    int combinationKey,         // Key used to handle room combinations (optional in overloads). \n                                // If specified, only items with the same key will be combined\n    Location location = null,   // Optional: info about the hotel's location (e.g. city, coordinates)\n    string hotelName = null,    // Optional: name of the hotel\n    string boardName = null     // Optional: name of the board type (e.g. \"All Inclusive\")\n  );\n}\n\n// Real example of how can it be used (injected):\n\n// Assuming you have an instance of IConnectorsUtilities called '_connectorsUtilities'\n\nvar roomCombineExtended = MethodThatReturnsARoomCombineExtended(supplierRoomData);\nvar location = MethodThatReturnsALocation(supplierLocationData);\n\n_optionsFromRoomsGenerator.TryAddHotelRoom(\n                    supplier.HotelCode,\n                    supplier.BoardCode,\n                    roomCombineExtended,\n                    0\n                    location,\n                    supplier.HotelName,\n                    supplier.BoardName);\n\nList<Accommodation> accomodationList = _optionsFromRoomsGenerator.Combine();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ioptionsgenerator",children:(0,r.jsx)(n.strong,{children:"IOptionsGenerator"})}),"\n",(0,r.jsxs)(n.p,{children:["Similar to ",(0,r.jsx)(n.code,{children:"IOptionsFromRoomsGenerator"}),", this utility accumulates pre-made options provided by the supplier. It applies Travelgate's business rules to ensure compliance with Travelgate standards."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Case"}),": Recommended when the supplier already provides pre-made options in the response."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public interface IOptionsGenerator\n{\n  bool TryAddHotelOption(\n    string hotelCode,           // Unique identifier of the hotel the room belongs to\n    string boardCode,           // Code representing the room's board type (e.g. AI)\n    Option option,              // Contains detailed info about the room and combination logic\n    string hotelName = null,    // Optional: name of the hotel\n    string boardName = null     // Optional: name of the board type (e.g. \"All Inclusive\")\n  );\n}\n\n// Real example of how can it be used (injected):\n\n// Assuming you have an instance of IConnectorsUtilities called '_connectorsUtilities'\n\nvar option = MethodThatReturnsAnOption(supplierOptionData);\n\n_optionsGenerator.TryAddHotelOption(\n                    supplier.HotelCode,\n                    supplier.BoardCode,\n                    option,\n                    supplier.HotelName,\n                    supplier.BoardName);\n\nList<Accommodation> accomodationList = _optionsGenerator.Combine();\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"icountryconverter",children:(0,r.jsx)(n.strong,{children:"ICountryConverter"})}),"\n",(0,r.jsx)(n.p,{children:"Converts ISO country codes and names, facilitating compatibility between supplier-specific formats and standardized ISO formats."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Case"}),": Applicable in ",(0,r.jsx)(n.code,{children:"Search"})," or ",(0,r.jsx)(n.code,{children:"Book"})," operations where supplier-specific country formats need to align with Travelgate standards."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public interface ICountryConverter\n{\n    /// <summary>\n    /// Tries to map the ISO-2 country code from the ISO-3 country code.\n    /// </summary>\n    /// <param name="mappedCountry">The ISO-3 country code to map from.</param>\n    /// <param name="country">The mapped ISO-2 country code.</param>\n    /// <returns><c>true</c> if the mapping is successful; otherwise, <c>false</c>.</returns>\n    public bool TryMapIso2FromIso3(string mappedCountry, out string country);\n\n    /// <summary>\n    /// Tries to map the ISO-3 country code from the ISO-2 country code.\n    /// </summary>\n    /// <param name="mappedCountry">The ISO-2 country code to map from.</param>\n    /// <param name="country">The mapped ISO-3 country code.</param>\n    /// <returns><c>true</c> if the mapping is successful; otherwise, <c>false</c>.</returns>\n    public bool TryMapIso3FromIso2(string mappedCountry, out string country);\n\n    /// <summary>\n    /// Tries to get the ISO-2 country code from the country name.\n    /// </summary>\n    /// <param name="mappedCountry">The country name to map from.</param>\n    /// <param name="country">The mapped ISO-2 country code.</param>\n    /// <returns><c>true</c> if the mapping is successful; otherwise, <c>false</c>.</returns>\n    public bool TryCountryIso2FromCountryName(string mappedCountry, out string country);\n\n    /// <summary>\n    /// Tries to get the ISO-3 country code from the country name.\n    /// </summary>\n    /// <param name="mappedCountry">The country name to map from.</param>\n    /// <param name="country">The mapped ISO-3 country code.</param>\n    /// <returns><c>true</c> if the mapping is successful; otherwise, <c>false</c>.</returns>\n    public bool TryCountryIso3FromCountryName(string mappedCountry, out string country);\n\n    /// <summary>\n    /// Tries to get the English country name from the ISO 2-letter country code.\n    /// </summary>\n    /// <param name="mappedCountry">The ISO 2-letter country code.</param>\n    /// <param name="country">The English country name.</param>\n    /// <returns><c>true</c> if the conversion is successful; otherwise, <c>false</c>.</returns>\n    public bool TryMapNameEnFromIso2(string mappedCountry, out string country);\n\n    /// <summary>\n    /// Tries to get the English country name from the ISO 3-letter country code.\n    /// </summary>\n    /// <param name="mappedCountry">The ISO 3-letter country code.</param>\n    /// <param name="country">The English country name.</param>\n    /// <returns><c>true</c> if the conversion is successful; otherwise, <c>false</c>.</returns>\n    public bool TryMapNameEnFromIso3(string mappedCountry, out string country);\n\n    /// <summary>\n    /// Gets the ISO-2 country code from the country name.\n    /// </summary>\n    /// <param name="countryDesc">The country name.</param>\n    /// <returns>The ISO-2 country code.</returns>\n    public string GetCountryIso2FromCountryName(string countryDesc);\n\n    /// <summary>\n    /// Gets the ISO-3 country code from the country name.\n    /// </summary>\n    /// <param name="countryDesc">The country name.</param>\n    /// <returns>The ISO-3 country code.</returns>\n    public string GetCountryIso3FromCountryName(string countryDesc);\n\n    /// <summary>\n    /// Gets the ISO-2 country code from the ISO-3 country code.\n    /// </summary>\n    /// <param name="mappedCountry">The ISO-3 country code.</param>\n    /// <returns>The ISO-2 country code.</returns>\n    public string GetIso2FromIso3(string mappedCountry);\n\n    /// <summary>\n    /// Gets the ISO-3 country code from the ISO-2 country code.\n    /// </summary>\n    /// <param name="mappedCountry">The ISO-2 country code.</param>\n    /// <returns>The ISO-3 country code.</returns>\n    public string GetIso3FromIso2(string mappedCountry);\n\n    /// <summary>\n    /// Gets the English country name from the ISO 2-letter country code.\n    /// </summary>\n    /// <param name="mappedCountry">The ISO 2-letter country code.</param>\n    /// <returns>The English country name.</returns>\n    public string GetCountryNameEnFromIso2(string mappedCountry);\n\n    /// <summary>\n    /// Gets the English country name from the ISO 3-letter country code.\n    /// </summary>\n    /// <param name="mappedCountry">The ISO 3-letter country code.</param>\n    /// <returns>The English country name.</returns>\n    public string GetCountryNameEnFromIso3(string mappedCountry);\n}\n\n// Real example of how can it be used (injected):\n\n// Assuming you have an instance of IConnectorsUtilities called \'_connectorsUtilities\':\n_ = _connectorsUtilities.CountryConverter.TryMapIso2FromIso3("ESP", out string country);\n_ = _connectorsUtilities.CountryConverter.TryMapIso3FromIso2("ES", out string country);\n_ = _connectorsUtilities.CountryConverter.TryCountryIso2FromCountryName("Spain", out string country);\n_ = _connectorsUtilities.CountryConverter.TryCountryIso3FromCountryName("Spain", out string country);\n_ = _connectorsUtilities.CountryConverter.TryMapNameEnFromIso2("ES", out string country);\n_ = _connectorsUtilities.CountryConverter.TryMapNameEnFromIso3("ESP", out string country);\n\nstring iso2CodeFromName = _connectorsUtilities.CountryConverter.GetCountryIso2FromCountryName("Spain");\nstring iso3CodeFromName = _connectorsUtilities.CountryConverter.GetCountryIso3FromCountryName("Spain");\nstring iso2CodeFromIso3 = _connectorsUtilities.CountryConverter.GetIso2FromIso3("ESP");\nstring iso3CodeFromIso2 = _connectorsUtilities.CountryConverter.GetIso3FromIso2("ES");\nstring countryNameFromIso2Code = _connectorsUtilities.CountryConverter.GetCountryNameEnFromIso2("ES");\nstring countryNameFromIso3Code = _connectorsUtilities.CountryConverter.GetCountryNameEnFromIso3("ESP");\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"imetadataconnectorsservice",children:(0,r.jsx)(n.strong,{children:"IMetadataConnectorsService"})}),"\n",(0,r.jsx)(n.p,{children:"Provides access to metadata utilities, allowing retrieval of supplier metadata, business rule configurations, and other operational data required for processing requests."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Case"}),": Ideal for dynamic retrieval and use of metadata, enabling adaptable and consistent Connector operations."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public interface IMetadataConnectorsService\n{\n    /// <summary>\n    /// Classifies an occupancy into adults, children, and infants based on the metadata, \n    /// also providing detailed information about their ages.\n    /// This is particularly useful when the supplier requires this classification to process the request.\n    /// </summary>\n    /// <param name="occupancy">The <see cref="Occupancy"/> object to classify and extract information from.</param>\n    /// <returns>\n    /// An <see cref="OccupancyInfoDetailed"/> object containing detailed information about the occupancy, \n    /// including the classification of adults, children, and infants, along with their respective ages.\n    /// </returns>\n    public OccupancyInfoDetailed GetDetailedOccupancyInfo(Occupancy occupancy);\n\n    /// <summary>\n    /// Classifies an occupancy from a booking request into adults, children, and infants based on the metadata, \n    /// also providing detailed information about their ages.\n    /// This is particularly useful when the supplier requires this classification to process a booking request.\n    /// </summary>\n    /// <param name="occupancy">The <see cref="BookOccupancy"/> object to classify and extract information from.</param>\n    /// <returns>\n    /// An <see cref="OccupancyInfoDetailed"/> object containing detailed information about the booking occupancy, \n    /// including the classification of adults, children, and infants, along with their respective ages.\n    /// </returns>\n    public OccupancyInfoDetailed GetDetailedOccupancyInfo(BookOccupancy occupancy);\n\n    /// <summary>\n    /// Classifies an occupancy from a booking request into adults, children, and infants based on metadata,\n    /// providing detailed information about their ages.\n    /// This classification is particularly useful when required by the supplier to process a booking request.\n    /// </summary>\n    /// <param name="occupancy">The <see cref="BookOccupancy"/> object to classify and extract information from.</param>\n    /// <returns>\n    /// A <see cref="BookOccupancyInfoDetailed"/> object containing detailed information about the booking occupancy,\n    /// including the classification of adults, children, and infants, along with their respective ages.\n    /// </returns>\n    public BookOccupancyInfoDetailed GetBookDetailedOccupancyInfo(BookOccupancy occupancy);\n\n    /// <summary>\n    /// Retrieves the time zone enumeration value defined in the connector\'s metadata.\n    /// This value is particularly useful in operations like cancellation policy management, such as those implemented in <see cref="ICancelPenaltyManager"/>.\n    /// </summary>\n    /// <param name="timeZoneEnum">\n    /// When this method returns, contains the <see cref="TimeZoneEnum"/> value if the operation succeeded, \n    /// or the default value if the operation failed.\n    /// </param>\n    /// <returns>\n    /// <c>true</c> if the <see cref="TimeZoneEnum"/> value was successfully retrieved; otherwise, <c>false</c>.\n    /// </returns>\n    public bool TryGetTimeZoneEnum(out TimeZoneEnum timeZoneEnum);\n\n    /// <summary>\n    /// Retrieves the age ranges.\n    /// </summary>\n    /// <returns>An <see cref="AgeRanges"/> object representing the age ranges.</returns>\n    public AgeRanges GetAgeRanges();\n\n    /// <summary>\n    /// Retrieves the full metadata element.\n    /// </summary>\n    /// <returns>An <see cref="MetadataElement"/> object representing the metadata from the current supplier.</returns>\n    public MetadataElement GetMetadata();\n\n    // Real example of how can it be used (injected):\n\n    // Assuming you have an instance of IConnectorsUtilities called \'utilities\':\n    OccupancyInfoDetailed occupancyInfoDetailed = _connectorsUtilities.MetadataConnectorsService.GetDetailedOccupancyInfo(firstOccupancy);\n    bool hasTimezoneSpecified = _connectorsUtilities.MetadataConnectorsService.TryGetTimeZoneEnum(out TimeZoneEnum timeZoneEnum);\n    AgeRanges ageRanges = _connectorsUtilities.MetadataConnectorsService.GetAgeRanges();\n    MetadataElement metadataElement = _connectorsUtilities.MetadataConnectorsService.GetMetadata();\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"These helpers are recommended for ensuring that your Connector adheres to Travelgate's standards and simplifies the handling of complex operations."})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);