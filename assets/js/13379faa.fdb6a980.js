/*! For license information please see 13379faa.fdb6a980.js.LICENSE.txt */
"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[86926],{19062:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/AccessModel-04a69a741b60ee8940a7a8ce6376483e.png"},21020:(e,n,s)=>{var r=s(96540),t=Symbol.for("react.element"),i=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,a={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,s){var r,i={},c=null,p=null;for(r in void 0!==s&&(c=""+s),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(p=n.ref),n)o.call(n,r)&&!a.hasOwnProperty(r)&&(i[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===i[r]&&(i[r]=n[r]);return{$$typeof:t,type:e,key:c,ref:p,props:i,_owner:l.current}}n.Fragment=i,n.jsx=c,n.jsxs=c},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(96540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},34296:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/TemplateStructureModels-9dcb5fa9ec4433a15c1813981aa9947b.png"},50662:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/TryValidateSearch-22885c8efe3b0001a9c6cef2f860bdc9.png"},54983:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"apis/for-sellers/connectors-pull-developers-api/Develop_from_Scratch/Develop_Search","title":"Search","description":"Mocked responses","source":"@site/docs/apis/for-sellers/connectors-pull-developers-api/Develop_from_Scratch/Develop_Search.mdx","sourceDirName":"apis/for-sellers/connectors-pull-developers-api/Develop_from_Scratch","slug":"/apis/for-sellers/connectors-pull-developers-api/Develop_from_Scratch/Develop_Search","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Develop_from_Scratch/Develop_Search","draft":false,"unlisted":false,"editUrl":"https://github.com/Travelgate/documentation/tree/main/docs/apis/for-sellers/connectors-pull-developers-api/Develop_from_Scratch/Develop_Search.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Search","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Prior implementation","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Develop_from_Scratch/Prior_API_Implementation"},"next":{"title":"Access Data","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Access_Data/AccessData"}}');var t=s(74848),i=s(28453);const o={title:"Search",sidebar_position:3},l=void 0,a={},c=[{value:"<strong>Mocked responses</strong>",id:"mocked-responses",level:2},{value:"<strong>Step 1: Define your Search responses (Mocks)</strong>",id:"step-1-define-your-search-responses-mocks",level:3},{value:"<strong>Step 2: Define the Models of your response (Request and Response models)</strong>",id:"step-2-define-the-models-of-your-response-request-and-response-models",level:3},{value:"<strong>Start the Search development</strong>",id:"start-the-search-development",level:2},{value:"<strong>Step 1: Add the necessary serializers</strong>",id:"step-1-add-the-necessary-serializers",level:3},{value:"<strong>Step 2: Define the AccessModel</strong>",id:"step-2-define-the-accessmodel",level:3},{value:"<strong>Step 3: About SearchOperation validators</strong>",id:"step-3-about-searchoperation-validators",level:3},{value:"<strong>Step 4: Build the request towards the seller</strong>",id:"step-4-build-the-request-towards-the-seller",level:3},{value:"<strong>Step 5: Parse the response towards the buyer</strong>",id:"step-5-parse-the-response-towards-the-buyer",level:3},{value:"<strong>Testing the Implementation</strong>",id:"testing-the-implementation",level:2},{value:"<strong>Option 1: Connector Integration Tests</strong>",id:"option-1-connector-integration-tests",level:3},{value:"<strong>Option 2: FormTest Tool (Shopping)</strong>",id:"option-2-formtest-tool-shopping",level:3},{value:"<strong>Changes Pull Request</strong>",id:"changes-pull-request",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"mocked-responses",children:(0,t.jsx)(n.strong,{children:"Mocked responses"})}),"\n",(0,t.jsx)(n.h3,{id:"step-1-define-your-search-responses-mocks",children:(0,t.jsx)(n.strong,{children:"Step 1: Define your Search responses (Mocks)"})}),"\n",(0,t.jsxs)(n.p,{children:["For step 2 it is necessary to define the responses for your search operation, it is recommended is to insert a supplier response into every mock or at least, into the mocks of the operation you will be developing (hence, ",(0,t.jsx)(n.strong,{children:"the first one will always be search mocks"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["We will be using the ",(0,t.jsx)(n.strong,{children:"TwoAdultTwoDays"}),' mock in (in the "',(0,t.jsx)(n.strong,{children:"tests -> MockServer -> Tests"}),'" folder) through all the steps of the development (this ',(0,t.jsx)(n.strong,{children:"use case"})," is present in all operations)"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Mock Example",src:s(71740).A+"",width:"405",height:"383"})}),"\n",(0,t.jsx)(n.h3,{id:"step-2-define-the-models-of-your-response-request-and-response-models",children:(0,t.jsx)(n.strong,{children:"Step 2: Define the Models of your response (Request and Response models)"})}),"\n",(0,t.jsx)(n.p,{children:"Next, you'll define the search data models for your requests and responses. These models are crucial because they specify the structure of the objects contained within supplier responses. They'll also play a vital role in serializing and deserializing requests and responses during development."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Response example",src:s(34296).A+"",width:"231",height:"355"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example of a SearchRequest model"})," (File: SearchRequest.cs):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"namespace ConnectorsIntegration.Search.Models.Request;\n\npublic class SearchRequest\n{\n    public string CheckIn { get; internal set; }\n    public string CheckOut { get; internal set; }\n    public string HotelCode { get; internal set; }\n    public List<SupplierOccupancy> Occupancy { get; internal set; }\n}\n\npublic class SupplierOccupancy\n{\n    public int Adults { get; internal set; }\n    public int Children { get; internal set; }\n    public IEnumerable<int> Infants { get; internal set; }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example of a SearchResponse model"})," (File: SearchResponse.cs):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"namespace ConnectorsIntegration.Search.Models.Response;\n\npublic class SearchResponse\n{\n    public List<SupplierOption> Options { get; set; }\n    public string HotelCode { get; set; }\n    public string BoardName { get; set; }\n    public string HotelName { get; set; }\n}\n\npublic class SupplierOption\n{\n    public string Status { get; set; }\n    public SupplierPrice SupplierPrice { get; set; }\n    public string SupplierPaymentType { get; set; }\n    public List<SupplierRoom> Rooms { get; set; }\n    public string BoardCode { get; set; }\n    public List<SupplierCancelPolicy> SupplierCancelPolicies { get; set; }\n}\n\npublic class SupplierCancelPolicy\n{\n    public double PenaltyAmount { get; set; }\n\n    public string PenaltyType { get; set; }\n\n    public string PenaltyCurrency { get; set; }\n\n    public string PenaltyDeadline { get; set; }\n}\n\npublic class SupplierPrice\n{\n    public string Currency { get; set; }\n    public double Net { get; set; }\n    public double MinimumSellingPrice { get; set; }\n}\n\npublic class SupplierRoom\n{\n    public uint OccupancyId { get; set; }\n    public string RoomCode { get; set; }\n\n    public SupplierPrice SupplierPrice { get; set; }\n    public string RoomDescription { get; set; }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"start-the-search-development",children:(0,t.jsx)(n.strong,{children:"Start the Search development"})}),"\n",(0,t.jsx)(n.h3,{id:"step-1-add-the-necessary-serializers",children:(0,t.jsx)(n.strong,{children:"Step 1: Add the necessary serializers"})}),"\n",(0,t.jsxs)(n.p,{children:["To specify which serializer the developer will be using (based on the seller's API) we can specify it in our \"",(0,t.jsx)(n.strong,{children:"Extensions"}),'":']}),"\n",(0,t.jsx)(n.p,{children:"File: SearchExtensions.cs"}),"\n",(0,t.jsxs)(n.p,{children:["If the seller works with ",(0,t.jsx)(n.strong,{children:"JSON"})," format, we can specify the integration to work with ",(0,t.jsx)(n.strong,{children:"JSON"})," with the following:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"internal static class SearchExtensions\n{\n    public static void AddSearchServices(this IServiceCollection services,\n        IConfiguration configuration)\n    {\n        //A JsonSerializer service is added along with the request and response model\n        services.AddJsonSerializer<SearchRequest, SearchResponse>(ConfigureJSONOptions);\n        //The SearchOperation is added, indicating what models should be used during the development of the Search operation\n        services.AddSearchOperation<SearchOperation, SearchRequest, SearchResponse, AccessModel>(TgxPlatform.Name,\n            configuration);\n    }\n    private static void ConfigureJSONOptions(JsonSerializerOptions options) { }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-2-define-the-accessmodel",children:(0,t.jsx)(n.strong,{children:"Step 2: Define the AccessModel"})}),"\n",(0,t.jsx)(n.p,{children:"The AccessModel is a class that will allow the integration to establish some information before launching the operations."}),"\n",(0,t.jsx)(n.p,{children:"This class can be found here:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"AccessModelStructure",src:s(19062).A+"",width:"606",height:"493"})}),"\n",(0,t.jsx)(n.p,{children:"For example, if the integration needs Generic and Search URLs, along with an Apikey, an AccessModel would look like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class AccessModel : IBindAccessModel\n{\n    public string User { get; private set; }\n    public string Password { get; private set; }\n\n    public string UrlGeneric { get; private set; }\n\n    public string UrlSearch { get; private set; }\n\n    public string ApiKey { get; private set; }\n\n    public void Bind(string supplier, Access access)\n    {\n        User = access.User;\n        Password = access.Password;\n        UrlGeneric = access.Urls.Generic;\n        UrlSearch = access.Urls.Search;\n        ApiKey = access.Parameters.GetOrDefault("ApiKey");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-3-about-searchoperation-validators",children:(0,t.jsx)(n.strong,{children:"Step 3: About SearchOperation validators"})}),"\n",(0,t.jsx)(n.p,{children:"Before proceeding to the BuildRequest and ParseResponse steps, it is important to know that before implementing them there are two previous validations that serve as a filter so the buildrequest and the parseresponse are as safe as possible. They can be found in the SearchOperation.cs class:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"TryValidateSearch",src:s(50662).A+"",width:"360",height:"341"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"TryValidateModelRequest"})}),"\n",(0,t.jsx)(n.p,{children:"This step validates the incoming request from the client. While most validation is defined in the metadata, this step is used for specific edge cases that cannot be generalized."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example Use Case:"})," In a Search operation, validating that hotel codes are numeric because supplier do not allow non-numeric hotels. This type of validation would not be covered by metadata."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public bool TryValidateModelRequest(\n    SearchConnectorRequest connectorsRequest, \n    SearchParameters<CntAccessModel> connectorParameters,\n    out IEnumerable<AdviseMessage> adviseMessages)\n{\n    //AdviseMessages are used to specify errors, such as checking if the hotel code is numeric and if not, add an AdviseMessage\n    adviseMessages = default;\n    return true; // Validation passes if no issues are found.\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"TryValidateSupplierResponses"})}),"\n",(0,t.jsx)(n.p,{children:"Once the supplier's response is received, this step validates it for errors or anomalies. Suppliers may return incomplete or erroneous data, so this step ensures only valid responses are processed further."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Details"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Check for supplier-specific error fields."}),"\n",(0,t.jsx)(n.li,{children:"Ensure required fields (e.g., hotel list) are present."}),"\n",(0,t.jsx)(n.li,{children:"Example Use Case: A supplier might return a response with an error code or an empty hotel list. This step would detect and handle such cases."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public bool TryValidateSupplierResponses(\n    SearchParameters<CntAccessModel> connectorParameters,\n    IEnumerable<SupplierResponseWrapper<SearchResponse>> supplierResponses,\n    out IEnumerable<AdviseMessage> adviseMessages)\n{\n    var supplierResponseWrappers = supplierResponses as SupplierResponseWrapper<SearchResponse>[] ?? supplierResponses.ToArray();\n    \n    var success = ResponseValidator.TryValidateSupplierResponses(supplierResponseWrappers, out adviseMessages);\n\n    if (!success) return false;\n    \n    if (supplierResponseWrappers.ElementAt(0).Response.HotelSearch?.Hotel is null)\n    {\n        adviseMessages =\n        [\n            AdviseMessage.BuildSupplierNoResults() // Indicates no results from the supplier.\n        ];\n\n        return false;\n    }\n\n    return true; // Validation passes if no issues are found.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-4-build-the-request-towards-the-seller",children:(0,t.jsx)(n.strong,{children:"Step 4: Build the request towards the seller"})}),"\n",(0,t.jsx)(n.p,{children:"Once all steps above have been done, it is time to really start building up the ConnectorIntegration."}),"\n",(0,t.jsx)(n.p,{children:'We will be implementing the "BuildRequest" step, in this case, it will be done inside SearchOperation, which will contain de object for the requests previously created (SearchRequest), the request that the buyer sends (connectorsRequest) and the parameters (connectorParameters) which will have some helpers:'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Build Request Search",src:s(78596).A+"",width:"301",height:"379"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example of Build Request:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"using Connectors.Core.Application.Connection;\nusing Connectors.Pull.Hotel.Application.Metadata;\nusing Connectors.Pull.Hotel.Application.Operations.Search;\nusing Connectors.Pull.Hotel.Domain.Contracts.Common;\nusing ConnectorsIntegration.Search.Models.Request;\n\nnamespace ConnectorsIntegration.Search.Operations;\n\ninternal partial class SearchOperation\n{\n    public IEnumerable<SupplierRequestWrapper<SearchRequest>> BuildRequests(\n        SearchConnectorRequest connectorsRequest,\n        SearchParameters<AccessModel> connectorParameters)\n    {\n        //Refers to the checkIn of the booking\n        string checkIn = connectorsRequest.SearchRq.SearchCriteria.CheckIn;\n        //Refers to the checkOut of the booking\n        string checkOut = connectorsRequest.SearchRq.SearchCriteria.CheckOut;\n        //Refers to the hotelCode of the booking. If the seller allows requests with multiple hotels, the Accomodations should be iterated\n        string hotelCode = connectorsRequest.SearchRq.SearchCriteria.Destinations.Accommodations.First().Code;\n        //Refers to the occupancy of the booking. If the seller allows requests with multiple occupancies, the Occupancies should be iterated\n        Occupancy firstOccupancy = connectorsRequest.SearchRq.SearchCriteria.Occupancies.First();\n        OccupancyInfoDetailed occupancyInfoDetailed = _connectorsUtilities.MetadataConnectorsService.GetDetailedOccupancyInfo(firstOccupancy);\n\n        SearchRequest searchRequest = BuildSearchRequest(checkIn, checkOut, hotelCode, occupancyInfoDetailed);\n\n        //Generic URL we prepared back in the AccessModel, which will be passed by the buyer\n        string searchUrl = connectorParameters.ParametersModel.UrlSearch;\n\n        SupplierRequestWrapper<SearchRequest> supplierRequest = new(\n            searchRequest,\n            new Uri(searchUrl),\n            HttpMethod.Post);\n\n        return\n        [\n            supplierRequest\n        ];\n    }\n\n    private static SearchRequest BuildSearchRequest(string checkIn, string checkOut, string hotelCode, OccupancyInfoDetailed occupancyInfoDetailed)\n    {\n        //The request towards the seller system\n      \n        return new SearchRequest()\n        {\n            CheckIn = checkIn,\n            CheckOut = checkOut,\n            HotelCode = hotelCode,\n            Occupancy = new List<SupplierOccupancy>()\n            {\n                new() {\n                    Adults = occupancyInfoDetailed.NumberOfAdults,\n                    Children = occupancyInfoDetailed.NumberOfChildren,\n                    Infants = occupancyInfoDetailed.InfantAges\n                }\n            } \n        };\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-5-parse-the-response-towards-the-buyer",children:(0,t.jsx)(n.strong,{children:"Step 5: Parse the response towards the buyer"})}),"\n",(0,t.jsx)(n.p,{children:"Once the request has been sent, we will have to control and parse the response returned by the seller."}),"\n",(0,t.jsx)(n.p,{children:'We will be implementing the "ParseResponse" step, in this case, it will be done inside SearchOperation:'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Build Request Search",src:s(78596).A+"",width:"301",height:"379"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example of Parse Response:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using Connectors.Core.Application.Connection;\nusing Connectors.Core.Application.Iso;\nusing Connectors.Core.Domain;\nusing Connectors.Pull.Hotel.Application.Operations.Search;\nusing Connectors.Pull.Hotel.Domain.Contracts.Common;\nusing Connectors.Pull.Hotel.Domain.Contracts.Search.Response;\nusing ConnectorsIntegration.Search.Models.Response;\n\nnamespace ConnectorsIntegration.Search.Operations;\n\ninternal partial class SearchOperation\n{\n    public SearchConnectorResponse ParseResponses(\n        SearchConnectorRequest connectorsRequest,\n        SearchParameters<AccessModel> connectorParameters,\n        IEnumerable<SupplierResponseWrapper<SearchResponse>> supplierResponses,\n        CancellationToken cancellationToken)\n    {\n        //We can safely do First() in case the seller only has one response because we check errors previously\n        var supplierResponse = supplierResponses.First().Response;\n        return new SearchConnectorResponse(ParseSupplierResponse(connectorsRequest, supplierResponse));\n    }\n\n    private SearchRs ParseSupplierResponse(SearchConnectorRequest connectorsRequest, SearchResponse supplierResponse)\n    {\n        foreach (SupplierOption supplierOption in supplierResponse.Options)\n        {\n            Status status = MapSellerToTgxStatus(supplierOption.Status);\n            Price price = ParseSupplierPrice(supplierOption.SupplierPrice);\n            PaymentType paymentType = MapSellerToTgxPaymentType(supplierOption.SupplierPaymentType);\n            List<Room> roomList = ParseSupplierRooms(supplierOption.Rooms);\n            var checkIn = connectorsRequest.SearchRq.SearchCriteria.CheckInAsDateTime;\n\n            var option = new Option(\n                status,\n                price,\n                [paymentType],\n                roomList\n                );\n\n            option.CancelPolicy = ParseSupplierCancelPolicies(checkIn, supplierOption.SupplierCancelPolicies);\n\n            //Helper to combine options\n            _connectorsUtilities.OptionsGenerator.TryAddHotelOption(\n                supplierResponse.HotelCode,\n                supplierOption.BoardCode,\n                option,\n                supplierResponse.HotelName,\n                supplierResponse.BoardName);\n        }\n\n        return new SearchRs(_connectorsUtilities.OptionsGenerator.Combine());\n    }\n\n    private OptionCancelPolicy ParseSupplierCancelPolicies(DateTime checkIn, List<SupplierCancelPolicy> supplierCancelPolicies)\n    {\n        List<CancelPenalty> cancelPenalties = [];\n\n        foreach (SupplierCancelPolicy supplierCancelPolicy in supplierCancelPolicies)\n        {\n            //Helper to map a string currency\n            Currency supplierCurrency = CurrencyIso4217Mapper.Map(supplierCancelPolicy.PenaltyCurrency);\n            PenaltyType penaltyType = MapSellerToTgxPenaltyType(supplierCancelPolicy.PenaltyType);\n            //Helper to create a policy based in a seller cancel penalty with deadline that has timezone\n            var penalty = _connectorsUtilities.CancelPenaltyManager.CancelPenaltyFromDateWithTimeZone(\n                checkIn,\n                penaltyType,\n                supplierCurrency,\n                supplierCancelPolicy.PenaltyAmount,\n                supplierCancelPolicy.PenaltyDeadline,\n                "yyyy-MM-ddTHH:mm:ss.fffffffzzz"\n            );\n            cancelPenalties.Add(penalty);\n        }\n        var refundable = cancelPenalties.Any();\n        return new OptionCancelPolicy(refundable, cancelPenalties);\n    }\n\n    private static List<Room> ParseSupplierRooms(List<SupplierRoom> rooms)\n    {\n        List<Room> roomList = [];\n\n        foreach (SupplierRoom supplierRoom in rooms)\n        {\n            var price = ParseSupplierPrice(supplierRoom.SupplierPrice);\n\n            RoomPrice roomPrice = new(price);\n\n            roomList.Add(new Room(\n                supplierRoom.OccupancyId,\n                supplierRoom.RoomCode,\n                supplierRoom.RoomDescription,\n                roomPrice\n            ));\n        }\n        return roomList;\n    }\n\n    private static PenaltyType MapSellerToTgxPenaltyType(string penaltyType) => penaltyType switch\n    {\n        "Percent" => PenaltyType.Percentage,\n        "Nights" => PenaltyType.Nights,\n        _ => PenaltyType.Amount\n    };\n\n    private static PaymentType MapSellerToTgxPaymentType(string supplierPaymentType) => supplierPaymentType switch\n    {\n        "MerchantPay" => PaymentType.MerchantPay,\n        "CardBookingPay" => PaymentType.CardBookingPay,\n        _ => PaymentType.MerchantPay\n    };\n\n\n    private static Status MapSellerToTgxStatus(string status) => status switch\n    {\n        "Available" => Status.OK,\n        "OnRequest" => Status.RQ,\n        _ => Status.Unknown\n    };\n\n    private static Price ParseSupplierPrice(SupplierPrice supplierPrice)\n    {\n        Currency supplierCurrency = CurrencyIso4217Mapper.Map(supplierPrice.Currency);\n        //Helper that builds a net price\n        var price = Price.BuildNetPrice(supplierCurrency, supplierPrice.Net, supplierPrice.MinimumSellingPrice);\n\n        return price;\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For more details about helpers, check the - ",(0,t.jsx)(n.a,{href:"../Tools_and_Helpers/Price_Helpers/PriceHelpers",children:"Price helpers"})," and ",(0,t.jsx)(n.a,{href:"../Tools_and_Helpers/Policies_Helpers/PoliciesHelpers",children:"Policies helpers"})]}),"\n",(0,t.jsxs)(n.p,{children:["For more details about the combinatory, check ",(0,t.jsx)(n.a,{href:"../Tools_and_Helpers/Recommended_Helpers",children:"Recommended Helpers"})]}),"\n",(0,t.jsx)(n.h2,{id:"testing-the-implementation",children:(0,t.jsx)(n.strong,{children:"Testing the Implementation"})}),"\n",(0,t.jsx)(n.h3,{id:"option-1-connector-integration-tests",children:(0,t.jsx)(n.strong,{children:"Option 1: Connector Integration Tests"})}),"\n",(0,t.jsx)(n.p,{children:"Use the integration tests provided by Travelgate to validate your implementation:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Add the necessary use cases to the ",(0,t.jsx)(n.strong,{children:"MockServer"})," for each operation.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/apis/for-sellers/connectors-pull-developers-api/Connector_Framework/MockServer_Documentation",children:"View MockServer Documentation"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Execute the associated tests for the implemented operation.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/apis/for-sellers/connectors-pull-developers-api/Connector_Framework/Running_Integration_Tests",children:"View Running Integration Tests"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"option-2-formtest-tool-shopping",children:(0,t.jsx)(n.strong,{children:"Option 2: FormTest Tool (Shopping)"})}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.strong,{children:"FormTest"})," application to test each operation manually:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Configure the tool to use your supplier's API settings."}),"\n",(0,t.jsxs)(n.li,{children:["Test specific scenarios not covered by predefined use cases.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/FormTest_Documentation",children:"View FormTest Documentation"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"changes-pull-request",children:(0,t.jsx)(n.strong,{children:"Changes Pull Request"})}),"\n",(0,t.jsxs)(n.p,{children:['Once finished, please commit your Search changes and push them to a new branch called "',(0,t.jsx)(n.strong,{children:"SearchDevelopment"}),'" into the original repository.']})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},71740:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/MockTwoAdults-0042e3d61416c6e5f3f2a185fdd1217f.png"},74848:(e,n,s)=>{e.exports=s(21020)},78596:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/BuildRequestSearch-d03120f4a9edabe22badc559935fb896.png"}}]);