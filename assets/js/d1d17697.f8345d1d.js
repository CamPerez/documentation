/*! For license information please see d1d17697.f8345d1d.js.LICENSE.txt */
"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[28940],{5126:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"apis/for-sellers/connectors-pull-developers-api/Connector_Framework/PreOperation_Overview","title":"PreOperation Overview","description":"Preoperations are preparatory steps required by the supplier before executing a main operation (see Operation Overview).","source":"@site/docs/apis/for-sellers/connectors-pull-developers-api/Connector_Framework/PreOperation_Overview.mdx","sourceDirName":"apis/for-sellers/connectors-pull-developers-api/Connector_Framework","slug":"/apis/for-sellers/connectors-pull-developers-api/Connector_Framework/PreOperation_Overview","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Connector_Framework/PreOperation_Overview","draft":false,"unlisted":false,"editUrl":"https://github.com/Travelgate/documentation/tree/main/docs/apis/for-sellers/connectors-pull-developers-api/Connector_Framework/PreOperation_Overview.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"PreOperation Overview","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Operation Overview","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Connector_Framework/Operation_Overview"},"next":{"title":"Repeat Flow Operations","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Connector_Framework/Repeat_Flow_Operations"}}');var t=r(74848),s=r(28453);const a={title:"PreOperation Overview",sidebar_position:3},i="Preoperation Overview",c={},l=[{value:"<strong>Example Preoperation: Quote</strong>",id:"example-preoperation-quote",level:2},{value:"<strong>Sharing Data Between Preoperations and Operations</strong>",id:"sharing-data-between-preoperations-and-operations",level:2},{value:"<strong>Injecting <code>IContextCache</code></strong>",id:"injecting-icontextcache",level:3},{value:"<strong>Adding Data to <code>IContextCache</code></strong>",id:"adding-data-to-icontextcache",level:2},{value:"<strong>Retrieving Data from <code>IContextCache</code></strong>",id:"retrieving-data-from-icontextcache",level:2},{value:"<strong>Adding a Preoperation</strong>",id:"adding-a-preoperation",level:2},{value:"<strong>Key Notes</strong>",id:"key-notes",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"preoperation-overview",children:"Preoperation Overview"})}),"\n",(0,t.jsxs)(n.p,{children:["Preoperations are preparatory steps required by the supplier before executing a main operation (see ",(0,t.jsx)(n.a,{href:"/docs/apis/for-sellers/connectors-pull-developers-api/Connector_Framework/Operation_Overview",children:"Operation Overview"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["These preoperations follow the same structure as regular operations and implement the ",(0,t.jsx)(n.code,{children:"IPre<Operation>Operations<SupplierRequest, SupplierResponse, Binder>"})," interface. Preoperations can be applied to ",(0,t.jsx)(n.code,{children:"Search"}),", ",(0,t.jsx)(n.code,{children:"Quote"}),", ",(0,t.jsx)(n.code,{children:"Book"}),", ",(0,t.jsx)(n.code,{children:"CheckBookingsByReference"}),", ",(0,t.jsx)(n.code,{children:"CheckBookingsByDates"}),", or ",(0,t.jsx)(n.code,{children:"Cancel"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"example-preoperation-quote",children:(0,t.jsx)(n.strong,{children:"Example Preoperation: Quote"})}),"\n",(0,t.jsxs)(n.p,{children:["The following example demonstrates a ",(0,t.jsx)(n.code,{children:"Quote"})," preoperation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public partial class PriceOperation(IContextCache contextCache, ICancelPenaltyManager cancelPenaltyManager)\n    : IPreQuoteOperations<PriceRq, PriceRs, CvcAccessModel>\n{\n    public bool TryValidateModelRequest(\n        QuoteConnectorRequest connectorsRequest, QuoteParameters<CvcAccessModel> connectorParameters,\n        out IEnumerable<AdviseMessage> adviseMessages)\n    {\n        adviseMessages = default;\n        return true;\n    }\n\n    public bool TryValidateSupplierResponses(\n        QuoteParameters<CvcAccessModel> connectorParameters, IEnumerable<SupplierResponseWrapper<PriceRs>> supplierResponses,\n        out IEnumerable<AdviseMessage> adviseMessages)\n    {\n        return supplierResponses.TryValidateSupplierResponses(out adviseMessages);\n    }\n\n    public IEnumerable<SupplierRequestWrapper<PriceRq>> BuildRequests(\n        QuoteConnectorRequest connectorsRequest, QuoteParameters<CvcAccessModel> connectorParameters)\n    {\n        // Implement request-building logic here\n    }\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"sharing-data-between-preoperations-and-operations",children:(0,t.jsx)(n.strong,{children:"Sharing Data Between Preoperations and Operations"})}),"\n",(0,t.jsxs)(n.p,{children:["To pass data between a preoperation and the main operation (or another preoperation), the ",(0,t.jsx)(n.code,{children:"IContextCache"})," class is used. This class allows you to store and retrieve custom data objects."]}),"\n",(0,t.jsx)(n.h3,{id:"injecting-icontextcache",children:(0,t.jsxs)(n.strong,{children:["Injecting ",(0,t.jsx)(n.code,{children:"IContextCache"})]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"IContextCache"})," instance is injected into the constructor via Dependency Injection:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public partial class PriceOperation : IPreQuoteOperations<PriceRq, PriceRs, CvcAccessModel>\n{\n    private readonly IContextCache _contextCache;\n    private readonly ICancelPenaltyManager _cancelPenaltyManager;\n\n    public PriceOperation(IContextCache contextCache, ICancelPenaltyManager cancelPenaltyManager)\n    {\n        _contextCache = contextCache;\n        _cancelPenaltyManager = cancelPenaltyManager;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"adding-data-to-icontextcache",children:(0,t.jsxs)(n.strong,{children:["Adding Data to ",(0,t.jsx)(n.code,{children:"IContextCache"})]})}),"\n",(0,t.jsxs)(n.p,{children:["Data can be added to the context cache in the ",(0,t.jsx)(n.code,{children:"ParseResponses"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public QuoteConnectorResponse ParseResponses(\n    QuoteConnectorRequest connectorsRequest, QuoteParameters<CvcAccessModel> connectorParameters,\n    IEnumerable<SupplierResponseWrapper<PriceRs>> supplierResponses, CancellationToken cancellationToken)\n{\n    var firstResponse = supplierResponses.First().Response;\n\n    var data = new Dictionary<uint, List<CancellationPolicy>>();\n    foreach (var bookingRule in firstResponse.BookingRules)\n    {\n        data.Add((uint)bookingRule.ProductTokenIndex, bookingRule.CancellationPolicies);\n    }\n\n    _contextCache.TryAdd(data);\n\n    return new QuoteConnectorResponse(new QuoteRs(default, default, default, PaymentType.MerchantPay));\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"retrieving-data-from-icontextcache",children:(0,t.jsxs)(n.strong,{children:["Retrieving Data from ",(0,t.jsx)(n.code,{children:"IContextCache"})]})}),"\n",(0,t.jsx)(n.p,{children:"Data stored in the cache can be retrieved in another operation or preoperation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"_contextCache.TryGet<LoginTokenData>(out var response);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"adding-a-preoperation",children:(0,t.jsx)(n.strong,{children:"Adding a Preoperation"})}),"\n",(0,t.jsxs)(n.p,{children:["To register a preoperation, use the appropriate service extensions based on the operation type. For example, for a ",(0,t.jsx)(n.code,{children:"Quote"})," preoperation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"services.AddPreQuoteOperation<PriceOperation, PriceRq, PriceRs, CvcAccessModel>();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Specify the serializer to use for the request and response format (e.g., JSON, XML, or a custom serializer):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"services.AddJsonSerializer<PriceRq, PriceRs>(_ => { });\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"key-notes",children:(0,t.jsx)(n.strong,{children:"Key Notes"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Preoperations are crucial when suppliers require additional preparatory steps, such as fetching tokens or rules, before the main operation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexibility"}),": Use ",(0,t.jsx)(n.code,{children:"IContextCache"})," to streamline data sharing across operations, reducing redundant calls."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modular Integration"}),": Register preoperations and serializers in the service collection, ensuring seamless integration with the Connector's architecture."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},21020:(e,n,r)=>{var o=r(96540),t=Symbol.for("react.element"),s=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,i=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,r){var o,s={},l=null,p=null;for(o in void 0!==r&&(l=""+r),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(p=n.ref),n)a.call(n,o)&&!c.hasOwnProperty(o)&&(s[o]=n[o]);if(e&&e.defaultProps)for(o in n=e.defaultProps)void 0===s[o]&&(s[o]=n[o]);return{$$typeof:t,type:e,key:l,ref:p,props:s,_owner:i.current}}n.Fragment=s,n.jsx=l,n.jsxs=l},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var o=r(96540);const t={},s=o.createContext(t);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},74848:(e,n,r)=>{e.exports=r(21020)}}]);