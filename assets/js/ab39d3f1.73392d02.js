/*! For license information please see ab39d3f1.73392d02.js.LICENSE.txt */
"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[46586],{21020:(e,n,s)=>{var i=s(96540),r=Symbol.for("react.element"),o=Symbol.for("react.fragment"),t=Object.prototype.hasOwnProperty,a=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function p(e,n,s){var i,o={},p=null,c=null;for(i in void 0!==s&&(p=""+s),void 0!==n.key&&(p=""+n.key),void 0!==n.ref&&(c=n.ref),n)t.call(n,i)&&!l.hasOwnProperty(i)&&(o[i]=n[i]);if(e&&e.defaultProps)for(i in n=e.defaultProps)void 0===o[i]&&(o[i]=n[i]);return{$$typeof:r,type:e,key:p,ref:c,props:o,_owner:a.current}}n.Fragment=o,n.jsx=p,n.jsxs=p},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(96540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}},60679:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"apis/for-sellers/connectors-pull-developers-api/Advanced_Use/Booking_Extensions","title":"Booking Extensions","description":"XML Extensions ##","source":"@site/docs/apis/for-sellers/connectors-pull-developers-api/Advanced_Use/Booking_Extensions.mdx","sourceDirName":"apis/for-sellers/connectors-pull-developers-api/Advanced_Use","slug":"/apis/for-sellers/connectors-pull-developers-api/Advanced_Use/Booking_Extensions","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Advanced_Use/Booking_Extensions","draft":false,"unlisted":false,"editUrl":"https://github.com/Travelgate/documentation/tree/main/docs/apis/for-sellers/connectors-pull-developers-api/Advanced_Use/Booking_Extensions.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Booking Extensions","sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"VirtualCreditCard","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/API_Reference/virtualcreditcard"},"next":{"title":"Content Extensions","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Advanced_Use/Content_Extensions"}}');var r=s(74848),o=s(28453);const t={title:"Booking Extensions",sidebar_position:2},a=void 0,l={},p=[{value:"XML Extensions",id:"xml-extensions",level:2},{value:"Multi JSON serializer",id:"multi-json-serializer",level:2},{value:"Multi XML serializer",id:"multi-xml-serializer",level:2},{value:"Polling",id:"polling",level:2}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"xml-extensions",children:"XML Extensions"}),"\n",(0,r.jsxs)(n.p,{children:["If the seller works with ",(0,r.jsx)(n.strong,{children:"XML"})," format, we can specify the integration to work with ",(0,r.jsx)(n.strong,{children:"XML"})," with the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"internal static class SearchExtensions\n{\n    public static void AddSearchServices(this IServiceCollection services,\n        IConfiguration configuration)\n    {\n        services.AddXmlSerializer<SearchRequest, SearchResponse>(ConfigureXmlOptions);\n        services.AddSearchOperation<SearchOperation, SearchRequest, SearchResponse, AccessModel>(TgxPlatform.Name,\n            configuration);\n    }\n    private static void ConfigureXmlOptions(XmlSerializerOptions options) { }\n}\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"caution",children:[(0,r.jsxs)(n.p,{children:["Be aware of the changes from ",(0,r.jsx)(n.strong,{children:"JSON"})," to ",(0,r.jsx)(n.strong,{children:"XML"}),":"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:['Now the service that is being used is "',(0,r.jsx)(n.strong,{children:"AddXmlSerializer"}),'" instead of "',(0,r.jsx)(n.strong,{children:"AddJsonSerializer"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:['The method that will have options for the serialization is now called "',(0,r.jsx)(n.strong,{children:"ConfigureXmlOptions"}),'" and has a "',(0,r.jsx)(n.strong,{children:"XmlSerializerOptions"}),'".']}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"multi-json-serializer",children:"Multi JSON serializer"}),"\n",(0,r.jsxs)(n.p,{children:["If the seller sends different json response structures in their response, implement a ",(0,r.jsx)(n.strong,{children:"MultiJSONSerializer"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:['Add the "AddMultiJsonSerializer" service in the extensions of the operation, for instance, in ',(0,r.jsx)(n.strong,{children:"Search"})," it would look like this:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"AddSerializerDependencySearch<SearchRequest, ResponseWrapper<SearchResponse>>(services); \nservices.AddSearchOperation<SearchOperation, SearchRequest, ResponseWrapper<SearchResponse>>, AccessModel>(TgxPlatform.Name, configuration);\n\npublic static void AddSerializerDependencySearch<TRequest, TResponse>(IServiceCollection services)\n{\n    MultiResponseJsonType[] multiResponseTypes = new MultiResponseJsonType[]\n    {\n        new(typeof(TResponse)),\n        new(typeof(List<TResponse>)),\n        new(typeof(ErrorResponse))\n    };\n\n    IDictionary<Type, JsonSerializerOptions> serializerOptions = ConfigureJsonOptions(multiResponseTypes);\n    ResponseJsonSerializer<TRequest, TResponse> serializer = new(multiResponseTypes, serializerOptions);\n\n    services.AddMultiJsonSerializer<TRequest, ResponseWrapper<TResponse>, MultiResponseJsonSerializer<TRequest, ResponseWrapper<TResponse>>>(serializer, serializerOptions);\n}\n\n//Add your JsonSerializerOptions as needed\nprivate static IDictionary<Type, JsonSerializerOptions> ConfigureJsonOptions(IEnumerable<MultiResponseJsonType> multiResponseTypes) =>\n    multiResponseTypes.ToDictionary(\n        type => type.Type,\n        type => new JsonSerializerOptions\n        {\n            PropertyNameCaseInsensitive = true,\n            PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n        });\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The class used in this service should also be created, like this:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ResponseJsonSerializer<TRequest, TResponse> : MultiResponseJsonSerializer<TRequest, ResponseWrapper<TResponse>>\n{\n    public ResponseJsonSerializer(\n        IEnumerable<MultiResponseJsonType> multiResponseTypes,\n        IDictionary<Type, JsonSerializerOptions> serializerOptions) \n        : base(multiResponseTypes, serializerOptions) { }\n\n    protected override ResponseWrapper<TResponse> BuildResponse(object response) => response switch\n    {\n        ErrorResponse errorResponse => new ResponseWrapper<TResponse> { ErrorResponse = errorResponse },\n        _ => new ResponseWrapper<TResponse> { Response = (TResponse)response }\n    };\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"multi-xml-serializer",children:"Multi XML serializer"}),"\n",(0,r.jsxs)(n.p,{children:["If the seller sends different XML response structures in their response, implement a ",(0,r.jsx)(n.strong,{children:"MultiXmlSerializer"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:['Add the "AddMultiXmlSerializer" service in the extensions of the operation, for instance, in ',(0,r.jsx)(n.strong,{children:"Search"})," it would look like this:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'AddMultiSerializer<SearchRequest, ResponseWrapper<SearchResponse>>(services); \nservices.AddSearchOperation<SearchOperation, SearchRequest, ResponseWrapper<SearchResponse>, AccessModel>(TgxPlatform.Name, configuration);\n\npublic static void AddMultiSerializer<TRequest, TResponse>(this IServiceCollection services, string name)\n{\n    var nameSpace = "http://www.opentravel.org/OTA/2003/05";\n    var multiResponseTypes = new[]\n    {\n        new MultiResponseType(typeof(ErrorResponse), "ErrorResponse", nameSpace),\n        new MultiResponseType(typeof(TResponse), name, nameSpace),\n    };\n    var serializer = new ResponseXmlSerializer<TRequest, TResponse>(services.BuildServiceProvider(), multiResponseTypes);\n\n    services.AddMultiXmlSerializer<TRequest, ResponseWrapper<TResponse>, ResponseXmlSerializer<TRequest, TResponse>>(serializer);\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The class used in this service should also be created, like this:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"\npublic class ResponseXmlSerializer<TRequest, TResponse> : MultiResponseXmlSerializer<TRequest, ResponseWrapper<TResponse>>\n{\n\n    public ResponseXmlSerializer(\n    IServiceProvider serviceProvider,\n    IEnumerable<MultiResponseType> multiResponseTypes,\n    XmlSerializerOptions xmlSerializerOptions = default) \n    : base(serviceProvider, multiResponseTypes, xmlSerializerOptions) { }\n\n    protected override ResponseWrapper<TResponse> BuildResponse(object response) => response switch\n    {\n        ErrorResponse errorRs => new ResponseWrapper<TResponse> { ErrorResponse = errorRs },\n        _ => new ResponseWrapper<TResponse> { Response = (TResponse)response }\n    };\n}\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"polling",children:"Polling"}),"\n",(0,r.jsx)(n.p,{children:"In some scenarios, polling is required to handle pagination. You can use the AddSearchPollingOperationFor extension to enable this behavior."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Specify Polling in the Search node in ",(0,r.jsx)(n.strong,{children:"appsettings.local.json"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"Search": {\n    "ConnectorsHttpClient": "Default",\n    "Polling": {\n        "Margin": "00:00:00.000",\n        "Delay": "00:00:00.000"\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Implement the Polling in the ",(0,r.jsx)(n.strong,{children:"SearchExtensions.cs"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"internal static class SearchExtensions\n{\n    public static void AddSearchServices(this IServiceCollection services,\n        IConfiguration configuration)\n    {\n        services.AddJsonSerializer<SearchRequest, SearchResponse>(JsonOptions.Configure);\n        services.AddSearchOperation<SearchOperation, SearchRequest, SearchResponse, AccessModel>(TgxPlatform.Name,\n            configuration).AddSearchPollingOperationFor<SearchRequest, SearchResponse, AccessModel>();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"This enables pagination support; you can then handle pages in your ParseResponses method as shown below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public SearchConnectorResponse ParseResponses(\n    SearchConnectorRequest connectorsRequest,\n    SearchParameters<AccessModel> connectorParameters,\n    IEnumerable<SupplierResponseWrapper<SearchResponse>> supplierResponses,\n    CancellationToken cancellationToken)\n{\n    var firstResponse = supplierResponses.First();\n\n    // Parses connector-specific options; not the focus here\n    ParseOptions(firstResponse);\n\n    var accommodations = connectorParameters.OptionsGenerator.Combine();\n\n    // Sets up the pagination context for the next page, if applicable\n    SetPaginationContext(firstResponse.header.Pagination);\n\n    // Marks whether this is the last page of results\n    return new SearchConnectorResponse(new SearchRs(accommodations))\n    {\n        IsFinished = IsPaginationFinished(firstResponse.header.Pagination)\n    };\n}\n\nprivate static bool IsPaginationFinished(Pagination pagination)\n{\n    // Pagination is finished when the current page is the last one\n    return pagination.currentPage >= pagination.totalPages;\n}\n\nprivate void SetPaginationContext(Pagination pagination)\n{\n    // If more pages exist, store the next page number in context for future requests\n    if (!IsPaginationFinished(pagination))\n    {\n        _contextCache.TryAdd(TgxPlatform.Pagination_Page, pagination.currentPage + 1);\n    }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},74848:(e,n,s)=>{e.exports=s(21020)}}]);