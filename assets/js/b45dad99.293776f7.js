/*! For license information please see b45dad99.293776f7.js.LICENSE.txt */
"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[56571],{21020:(e,o,n)=>{var t=n(96540),r=Symbol.for("react.element"),s=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,a={key:!0,ref:!0,__self:!0,__source:!0};function d(e,o,n){var t,s={},d=null,c=null;for(t in void 0!==n&&(d=""+n),void 0!==o.key&&(d=""+o.key),void 0!==o.ref&&(c=o.ref),o)i.call(o,t)&&!a.hasOwnProperty(t)&&(s[t]=o[t]);if(e&&e.defaultProps)for(t in o=e.defaultProps)void 0===s[t]&&(s[t]=o[t]);return{$$typeof:r,type:e,key:d,ref:c,props:s,_owner:l.current}}o.Fragment=s,o.jsx=d,o.jsxs=d},28453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>l});var t=n(96540);const r={},s=t.createContext(r);function i(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:o},e.children)}},74848:(e,o,n)=>{e.exports=n(21020)},85916:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Recommended_Helpers","title":"Recommended Helpers","description":"To facilitate complex points in the Connector, the IConnectorsUtilities class provides several helpful utilities. These helpers simplify common tasks and ensure adherence to Travelgate standards.","source":"@site/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Recommended_Helpers.mdx","sourceDirName":"apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers","slug":"/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Recommended_Helpers","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Recommended_Helpers","draft":false,"unlisted":false,"editUrl":"https://github.com/Travelgate/documentation/tree/main/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Recommended_Helpers.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Recommended Helpers","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"FormTest","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/FormTest_Documentation"},"next":{"title":"Policies Helpers","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Policies_Helpers/PoliciesHelpers"}}');var r=n(74848),s=n(28453);const i={title:"Recommended Helpers",sidebar_position:3},l="Recommended Helpers",a={},d=[{value:"<strong>Utilities Overview</strong>",id:"utilities-overview",level:2},{value:"<strong>IOptionsFromRoomsGenerator</strong>",id:"ioptionsfromroomsgenerator",level:3},{value:"<strong>IOptionsGenerator</strong>",id:"ioptionsgenerator",level:3},{value:"<strong>ICountryConverter</strong>",id:"icountryconverter",level:3},{value:"<strong>IMetadataConnectorsService</strong>",id:"imetadataconnectorsservice",level:3}];function c(e){const o={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.header,{children:(0,r.jsx)(o.h1,{id:"recommended-helpers",children:"Recommended Helpers"})}),"\n",(0,r.jsxs)(o.p,{children:["To facilitate complex points in the Connector, the ",(0,r.jsx)(o.code,{children:"IConnectorsUtilities"})," class provides several helpful utilities. These helpers simplify common tasks and ensure adherence to Travelgate standards."]}),"\n",(0,r.jsx)(o.hr,{}),"\n",(0,r.jsx)(o.h2,{id:"utilities-overview",children:(0,r.jsx)(o.strong,{children:"Utilities Overview"})}),"\n",(0,r.jsx)(o.h3,{id:"ioptionsfromroomsgenerator",children:(0,r.jsx)(o.strong,{children:"IOptionsFromRoomsGenerator"})}),"\n",(0,r.jsxs)(o.p,{children:["This utility is particularly useful in the ",(0,r.jsx)(o.code,{children:"Search"})," operation for suppliers that return rooms instead of pre-made options. Since Travelgate operates with options, this generator accumulates rooms and applies business rules to generate valid options."]}),"\n",(0,r.jsxs)(o.blockquote,{children:["\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:"Use Case"}),": Recommended when the supplier provides rooms without combining them into options."]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-csharp",children:"public interface IOptionsFromRoomsGenerator\n{\n  bool TryAddHotelRoom(\n    string hotelCode,           // Unique identifier of the hotel the room belongs to\n    string boardCode,           // Code representing the room's board type (e.g. AI)\n    RoomCombineExtended roomCombineExtended, // Contains detailed info about the room and combination logic\n    int combinationKey,         // Key used to handle room combinations (optional in overloads). \n                                // If specified, only items with the same key will be combined\n    Location location = null,   // Optional: info about the hotel's location (e.g. city, coordinates)\n    string hotelName = null,    // Optional: name of the hotel\n    string boardName = null     // Optional: name of the board type (e.g. \"All Inclusive\")\n  );\n}\n\n//Real example of how can it be used (injected):\n\nvar roomCombineExtended = MethodThatReturnsARoomCombineExtended(supplierRoomData);\nvar location = MethodThatReturnsALocation(supplierLocationData);\n\n_optionsFromRoomsGenerator.TryAddHotelRoom(\n                    supplier.HotelCode,\n                    supplier.BoardCode,\n                    roomCombineExtended,\n                    0\n                    location,\n                    supplier.HotelName,\n                    supplier.BoardName);\n\nList<Accommodation> accomodationList = _optionsFromRoomsGenerator.Combine();\n"})}),"\n",(0,r.jsx)(o.hr,{}),"\n",(0,r.jsx)(o.h3,{id:"ioptionsgenerator",children:(0,r.jsx)(o.strong,{children:"IOptionsGenerator"})}),"\n",(0,r.jsxs)(o.p,{children:["Similar to ",(0,r.jsx)(o.code,{children:"IOptionsFromRoomsGenerator"}),", this utility accumulates pre-made options provided by the supplier. It applies Travelgate's business rules to ensure compliance with Travelgate standards."]}),"\n",(0,r.jsxs)(o.blockquote,{children:["\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:"Use Case"}),": Recommended when the supplier already provides pre-made options in the response."]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-csharp",children:'public interface IOptionsGenerator\n{\n  bool TryAddHotelOption(\n    string hotelCode,           // Unique identifier of the hotel the room belongs to\n    string boardCode,           // Code representing the room\'s board type (e.g. AI)\n    Option option,              // Contains detailed info about the room and combination logic\n    string hotelName = null,    // Optional: name of the hotel\n    string boardName = null     // Optional: name of the board type (e.g. "All Inclusive")\n  );\n}\n\n//Real example of how can it be used (injected):\n\nvar option = MethodThatReturnsAnOption(supplierOptionData);\n\n_optionsGenerator.TryAddHotelOption(\n                    supplier.HotelCode,\n                    supplier.BoardCode,\n                    option,\n                    supplier.HotelName,\n                    supplier.BoardName);\n\nList<Accommodation> accomodationList = _optionsGenerator.Combine();\n\n'})}),"\n",(0,r.jsx)(o.h3,{id:"icountryconverter",children:(0,r.jsx)(o.strong,{children:"ICountryConverter"})}),"\n",(0,r.jsx)(o.p,{children:"Converts ISO country codes and names, facilitating compatibility between supplier-specific formats and standardized ISO formats."}),"\n",(0,r.jsxs)(o.blockquote,{children:["\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:"Use Case"}),": Useful in ",(0,r.jsx)(o.code,{children:"Search"})," or ",(0,r.jsx)(o.code,{children:"Book"})," operations where supplier-specific country formats need to align with Travelgate standards."]}),"\n"]}),"\n",(0,r.jsxs)(o.p,{children:["[TODO inject code of ",(0,r.jsx)(o.code,{children:"ICountryConverter"}),"]"]}),"\n",(0,r.jsx)(o.hr,{}),"\n",(0,r.jsx)(o.h3,{id:"imetadataconnectorsservice",children:(0,r.jsx)(o.strong,{children:"IMetadataConnectorsService"})}),"\n",(0,r.jsx)(o.p,{children:"Provides access to metadata utilities, allowing retrieval of supplier metadata, business rule configurations, and other operational data required for processing requests."}),"\n",(0,r.jsxs)(o.blockquote,{children:["\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:"Use Case"}),": Ideal for dynamic retrieval and use of metadata, enabling adaptable and consistent Connector operations."]}),"\n"]}),"\n",(0,r.jsxs)(o.p,{children:["[TODO inject code of ",(0,r.jsx)(o.code,{children:"IMetadataConnectorsService"}),"]"]}),"\n",(0,r.jsx)(o.hr,{}),"\n",(0,r.jsx)(o.p,{children:"These helpers are recommended for ensuring that your Connector adheres to Travelgate's standards and simplifies the handling of complex operations."})]})}function p(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);