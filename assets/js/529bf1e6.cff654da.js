/*! For license information please see 529bf1e6.cff654da.js.LICENSE.txt */
"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[50993],{21020:(e,s,n)=>{var r=n(96540),i=Symbol.for("react.element"),o=Symbol.for("react.fragment"),t=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function a(e,s,n){var r,o={},a=null,c=null;for(r in void 0!==n&&(a=""+n),void 0!==s.key&&(a=""+s.key),void 0!==s.ref&&(c=s.ref),s)t.call(s,r)&&!p.hasOwnProperty(r)&&(o[r]=s[r]);if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:i,type:e,key:a,ref:c,props:o,_owner:l.current}}s.Fragment=o,s.jsx=a,s.jsxs=a},28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>l});var r=n(96540);const i={},o=r.createContext(i);function t(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:s},e.children)}},74848:(e,s,n)=>{e.exports=n(21020)},84972:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"apis/for-sellers/connectors-pull-developers-api/Advanced_Use/Extensions","title":"Extensions","description":"XML Extensions ##","source":"@site/docs/apis/for-sellers/connectors-pull-developers-api/Advanced_Use/Extensions.mdx","sourceDirName":"apis/for-sellers/connectors-pull-developers-api/Advanced_Use","slug":"/apis/for-sellers/connectors-pull-developers-api/Advanced_Use/Extensions","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Advanced_Use/Extensions","draft":false,"unlisted":false,"editUrl":"https://github.com/Travelgate/documentation/tree/main/docs/apis/for-sellers/connectors-pull-developers-api/Advanced_Use/Extensions.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"VirtualCreditCard","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/API_Reference/virtualcreditcard"},"next":{"title":"Quickstart","permalink":"/docs/apis/for-sellers/inventory-push-graphql-api/quickstart"}}');var i=n(74848),o=n(28453);const t={},l=void 0,p={},a=[{value:"XML Extensions",id:"xml-extensions",level:2},{value:"Multi JSON serializer",id:"multi-json-serializer",level:2},{value:"Multi XML serializer",id:"multi-xml-serializer",level:2}];function c(e){const s={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:""}),"\n",(0,i.jsx)(s.h2,{id:"xml-extensions",children:"XML Extensions"}),"\n",(0,i.jsxs)(s.p,{children:["If the seller works with ",(0,i.jsx)(s.strong,{children:"XML"})," format, we can specify the integration to work with ",(0,i.jsx)(s.strong,{children:"XML"})," with the following:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"internal static class SearchExtensions\n{\n    public static void AddSearchServices(this IServiceCollection services,\n        IConfiguration configuration)\n    {\n        services.AddXmlSerializer<SearchRequest, SearchResponse>(ConfigureXmlOptions);\n        services.AddSearchOperation<SearchOperation, SearchRequest, SearchResponse, AccessModel>(TgxPlatform.Name,\n            configuration);\n    }\n    private static void ConfigureXmlOptions(XmlSerializerOptions options) { }\n}\n"})}),"\n",(0,i.jsxs)(s.admonition,{type:"caution",children:[(0,i.jsxs)(s.p,{children:["Be aware of the changes from ",(0,i.jsx)(s.strong,{children:"JSON"})," to ",(0,i.jsx)(s.strong,{children:"XML"}),":"]}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:['Now the service that is being used is "',(0,i.jsx)(s.strong,{children:"AddXmlSerializer"}),'" instead of "',(0,i.jsx)(s.strong,{children:"AddJsonSerializer"}),'"']}),"\n",(0,i.jsxs)(s.li,{children:['The method that will have options for the serialization is now called "',(0,i.jsx)(s.strong,{children:"ConfigureXmlOptions"}),'" and has a "',(0,i.jsx)(s.strong,{children:"XmlSerializerOptions"}),'".']}),"\n"]})]}),"\n",(0,i.jsx)(s.h2,{id:"multi-json-serializer",children:"Multi JSON serializer"}),"\n",(0,i.jsxs)(s.p,{children:["If the seller sends different json response structures in their response, implement a ",(0,i.jsx)(s.strong,{children:"MultiJSONSerializer"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:['Add the "AddMultiJsonSerializer" service in the extensions of the operation, for instance, in ',(0,i.jsx)(s.strong,{children:"Search"})," it would look like this:"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"AddSerializerDependencySearch<SearchRequest, ResponseWrapper<List<SearchResponse>>>(services); \nservices.AddSearchOperation<SearchOperation, SearchRequest, ResponseWrapper<List<SearchResponse>>, AccessModel>(TgxPlatform.Name, configuration);\n\npublic static void AddSerializerDependencySearch<TRequest, TResponse>(IServiceCollection services)\n{\n    MultiResponseJsonType[] multiResponseTypes = new MultiResponseJsonType[]\n    {\n        new(typeof(SearchResponse)),\n        new(typeof(List<SearchResponse>)),\n        new(typeof(ErrorResponse))\n    };\n\n    IDictionary<Type, JsonSerializerOptions> serializerOptions = ConfigureJsonOptions(multiResponseTypes);\n    ResponseJsonSerializer<TRequest, List<SearchResponse>> serializer = new(multiResponseTypes, serializerOptions);\n\n    services.AddMultiJsonSerializer<TRequest, ResponseWrapper<List<SearchResponse>>, MultiResponseJsonSerializer<TRequest, ResponseWrapper<List<SearchResponse>>>>(serializer, serializerOptions);\n}\n\n//Add your JsonSerializerOptions as needed\nprivate static IDictionary<Type, JsonSerializerOptions> ConfigureJsonOptions(IEnumerable<MultiResponseJsonType> multiResponseTypes) =>\n    multiResponseTypes.ToDictionary(\n        type => type.Type,\n        type => new JsonSerializerOptions\n        {\n            PropertyNameCaseInsensitive = true,\n            PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n        });\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"The class used in this service should also be created, like this:"}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public class ResponseJsonSerializer<TRequest, TResponse> : MultiResponseJsonSerializer<TRequest, ResponseWrapper<TResponse>>\n{\n    public ResponseJsonSerializer(\n        IEnumerable<MultiResponseJsonType> multiResponseTypes,\n        IDictionary<Type, JsonSerializerOptions> serializerOptions) \n        : base(multiResponseTypes, serializerOptions) { }\n\n    protected override ResponseWrapper<TResponse> BuildResponse(object response) => response switch\n    {\n        ErrorResponse errorResponse => new ResponseWrapper<TResponse> { ErrorResponse = errorResponse },\n        _ => new ResponseWrapper<TResponse> { Response = (TResponse)response }\n    };\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"multi-xml-serializer",children:"Multi XML serializer"}),"\n",(0,i.jsxs)(s.p,{children:["If the seller sends different XML response structures in their response, implement a ",(0,i.jsx)(s.strong,{children:"MultiXmlSerializer"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:['Add the "AddMultiXmlSerializer" service in the extensions of the operation, for instance, in ',(0,i.jsx)(s.strong,{children:"Search"})," it would look like this:"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'AddMultiSerializer<SearchRequest, ResponseWrapper<List<SearchResponse>>>(services); \nservices.AddSearchOperation<SearchOperation, SearchRequest, ResponseWrapper<List<SearchResponse>>, AccessModel>(TgxPlatform.Name, configuration);\n\npublic static void AddMultiSerializer<TRequest, TResponse>(this IServiceCollection services, string name)\n{\n    var nameSpace = "http://www.opentravel.org/OTA/2003/05";\n    var multiResponseTypes = new[]\n    {\n        new MultiResponseType(typeof(ErrorResponse), "ErrorResponse", nameSpace),\n        new MultiResponseType(typeof(TResponse), name, nameSpace),\n    };\n    var serializer = new ResponseXmlSerializer<TRequest, TResponse>(services.BuildServiceProvider(), multiResponseTypes);\n\n    services.AddMultiXmlSerializer<TRequest, ResponseWrapper<TResponse>, ResponseXmlSerializer<TRequest, TResponse>>(serializer);\n}\n'})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"The class used in this service should also be created, like this:"}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"\npublic class ResponseXmlSerializer<TRequest, TResponse> : MultiResponseXmlSerializer<TRequest, ResponseWrapper<TResponse>>\n{\n\n    public ResponseXmlSerializer(\n    IServiceProvider serviceProvider,\n    IEnumerable<MultiResponseType> multiResponseTypes,\n    XmlSerializerOptions xmlSerializerOptions = default) \n    : base(serviceProvider, multiResponseTypes, xmlSerializerOptions) { }\n\n    protected override ResponseWrapper<TResponse> BuildResponse(object response) => response switch\n    {\n        ErrorResponse errorRs => new ResponseWrapper<TResponse> { ErrorResponse = errorRs },\n        _ => new ResponseWrapper<TResponse> { Response = (TResponse)response }\n    };\n}\n\n"})})]})}function d(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);