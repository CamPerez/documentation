"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["11832"],{73890:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>c,toc:()=>t,default:()=>m,metadata:()=>r,assets:()=>u,contentTitle:()=>o});var r=JSON.parse('{"id":"apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Price_Helpers/PriceHelpers","title":"PriceHelpers","description":"Helpers for Mapping Supplier Price Data","source":"@site/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Price_Helpers/PriceHelpers.mdx","sourceDirName":"apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Price_Helpers","slug":"/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Price_Helpers/PriceHelpers","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Price_Helpers/PriceHelpers","draft":false,"unlisted":false,"editUrl":"https://github.com/Travelgate/documentation/tree/main/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Price_Helpers/PriceHelpers.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Policies Helpers","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/Tools_and_Helpers/Policies_Helpers/PoliciesHelpers"},"next":{"title":"Access","permalink":"/docs/apis/for-sellers/connectors-pull-developers-api/API_Reference/access"}}'),s=i(85893),l=i(50065);let c={},o=void 0,u={},t=[{value:"<strong>Helpers for Mapping Supplier Price Data</strong>",id:"helpers-for-mapping-supplier-price-data",level:3},{value:"<strong>BuildNetPrice</strong>",id:"buildnetprice",level:4},{value:"<strong>BuildGrossWithCommissionPrice</strong>",id:"buildgrosswithcommissionprice",level:4},{value:"<strong>BuildGrossUnknownNetPrice</strong>",id:"buildgrossunknownnetprice",level:4},{value:"<strong>BuildNetGrossPrice</strong>",id:"buildnetgrossprice",level:4}];function p(e){let n={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"helpers-for-mapping-supplier-price-data",children:(0,s.jsx)(n.strong,{children:"Helpers for Mapping Supplier Price Data"})}),"\n",(0,s.jsx)(n.p,{children:"To accurately map prices data to our internal model, you can use one of the following helper methods depending on the supplier data format:"}),"\n",(0,s.jsx)(n.h4,{id:"buildnetprice",children:(0,s.jsx)(n.strong,{children:"BuildNetPrice"})}),"\n",(0,s.jsx)(n.p,{children:"Use this method when the supplier provides a net price with no commission."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public static Price BuildNetPrice(Currency currency, double net, double minimumPrice)\n{\n  return new Price(\n    currency, \n    Price.CalculateBindingFromMinimumPrice(minimumPrice), \n    net, \n    net, \n    minimumSellingPrice: minimumPrice);\n}\n\n//Example of how should it be implemented:\n\n// Sample data\nCurrency currency = Currency.USD; // Example enum value\ndouble netAmount = supplier.NetPrice; // "150.00" Net price given by the supplier\ndouble mspAmount = supplier.MinimumSellingPrice; // "170.00" Minimum selling price given by the supplier\n\n// Method call\n\nPrice price = Price.BuildNetPrice(currency, netAmount, mspAmount);\n'})}),"\n",(0,s.jsx)(n.h4,{id:"buildgrosswithcommissionprice",children:(0,s.jsx)(n.strong,{children:"BuildGrossWithCommissionPrice"})}),"\n",(0,s.jsx)(n.p,{children:"Use this method when the supplier provides gross price with commission."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public static Price BuildGrossWithCommissionPrice(\n  Currency currency,\n  double gross,\n  double commission,\n  double minimumPrice,\n  double priceSurchargesIncluded = 0.0)\n{\n  if (commission > 1.0 || commission < 0.0)\n  {\n    throw new ArgumentException("Commission should have a value between 0 and 1");\n  }\n  double net = Price.CalculateNetFromGrossAndCommission(gross - priceSurchargesIncluded, commission) + priceSurchargesIncluded;\n  return new Price(currency, Price.CalculateBindingFromMinimumPrice(minimumPrice), net, gross, minimumSellingPrice: minimumPrice);\n}\n\n//Example of how should it be implemented:\n\n// Sample data\nCurrency currency = Currency.USD; // Example enum value\ndouble grossAmount = supplier.GrossPrice; // "170.00" Gross price given by the supplier\ndouble commission = supplier.Commisison; // "0.1176" Commission fraction given by the supplier\ndouble minimumPrice = supplier.MinimumSellingPrice; // "170.00" Minimum selling price given by the supplier\n\n// Method call\n\nPrice price = Price.BuildGrossWithCommissionPrice(currency, grossAmount, commission, minimumPrice);\n'})}),"\n",(0,s.jsx)(n.h4,{id:"buildgrossunknownnetprice",children:(0,s.jsx)(n.strong,{children:"BuildGrossUnknownNetPrice"})}),"\n",(0,s.jsx)(n.p,{children:"Use this method when the supplier does return the gross without commission."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public static Price BuildGrossUnknownNetPrice(\n  Currency currency,\n  double gross,\n  double minimumPrice)\n{\n  return new Price(\n    currency, \n    Price.CalculateBindingFromMinimumPrice(minimumPrice), \n    0.0, \n    gross, \n    false, \n    minimumPrice);\n}\n\n// Example of how should it be implemented:\n\n// Sample data\nCurrency currency = Currency.USD; // Example enum value\ndouble grossAmount = supplier.GrossPrice; // "170.00" Gross price given by the supplier\ndouble minimumPrice = supplier.MinimumSellingPrice; // "170.00" Minimum selling price given by the supplier\n\n// Method call\nPrice price = Price.BuildGrossUnknownNetPrice(currency, grossAmount, minimumPrice);\n'})}),"\n",(0,s.jsx)(n.h4,{id:"buildnetgrossprice",children:(0,s.jsx)(n.strong,{children:"BuildNetGrossPrice"})}),"\n",(0,s.jsx)(n.p,{children:"Use this method when the supplier returns both net and gross prices."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public static Price BuildNetGrossPrice(\n  Currency currency,\n  double net,\n  double gross,\n  double minimumPrice)\n{\n  return new Price(\n    currency, \n    Price.CalculateBindingFromMinimumPrice(minimumPrice), \n    net, \n    gross, \n    minimumSellingPrice: minimumPrice);\n}\n\n// Example of how should it be implemented:\n\n// Sample data\nCurrency currency = Currency.USD; // Example enum value\ndouble grossAmount = supplier.GrossPrice; // "170.00" Gross price given by the supplier\ndouble netAmount = supplier.NetPrice; // "150.00" Net price given by the supplier\ndouble minimumPrice = supplier.MinimumSellingPrice; // "170.00" Minimum selling price given by the supplier\n\n// Method call\nPrice price = Price.BuildNetGrossPrice(currency, grossAmount, minimumPrice);\n'})})]})}function m(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},50065:function(e,n,i){i.d(n,{Z:()=>o,a:()=>c});var r=i(67294);let s={},l=r.createContext(s);function c(e){let n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);